1.1 Reading data from a csv file
   - read ../data/bikes.csv into bikes

1.2 Selecting a column
   - select column 'Berri 1'

1.3 Plotting a column
   - plot column 'Berri 1'

2.0 read '../data/311-service-requests.csv' into complaints

2.2 Selecting columns and rows
   - select a column of 'Complaint Type'

   - select the first 5 rows of a column of 'Complaint Type'
   
2.3 Selecting multiple columns
   - select column of 'Complaint Type', 'Borough'

2.4 What's the most common complaint type?
   - get and plot

3.1 Selecting only noise complaints
   - 'Complaint Type' column의 값이 "Noise - Street/Sidewalk" 인 레코드만을 noise_complaints로 저장

   - 'Complaint Type' column의 값이 "Noise - Street/Sidewalk" 이고 'Borough' column 값이 'ROOKLYN'인 레코드만을 noise_complaints로 저장

3.3 So, which borough has the most noise complaints?

4.1 Adding a 'weekday' column to our dataframe 
    - read ../data/bikes.csv into bikes

    - select 'Berri 1' column into berri_bikes

    - add 'weekday' column into berri_bikes

4.2 Adding up the cyclists by weekday
    - group by 'weekday' and sum into weekday_counts

    - chage index from 0, 1, ... to 'Monday', 'Tuesday', ...

    - plot weekday_counts

    - checkout groupby tutorial

5.3 Plotting the temperature by hour of day
    - read csv '../data/weather_2012.csv' into weathre_2012_final
    - Save March's data into weather_mar2012
    - Gropy weather_mar2012 by hour and plot mean of group

6.2 Use resampling to find the snowiest month
    - get median temperature each month and save into temperature and plot it 

    - save whether 'Wether' column has 'Snowing' into is_snowing

    - use resample to find the percentage of time it was snowing each month, save it into snowiness
 
    - combine the two statistics (temperature, snowiness) into a single dataframe (stats)

    - plot stats into subplots

7.1 How do we know if it's messy?
    - read '../data/311-service-requests.csv' into requests
    - use unique() onto 'Incident Zip' to check out whether it is messy.

7.3 Fixing the nan values and string/float confusion
    - We can pass a na_values option to pd.read_csv to clean this up a little bit. ('NO CLUE', 'N/A', '0')
      We can also specify that the type of Incident Zip is a string, not a float.

7.4 What's up with the dashes?
    - Save whether row has dash in 'Incident Zip' into rows_with_dashes
    - Truncate long zip code to 5 length.
    - make 00000 zip code into nan
    - save whether zip code starts with '0' or '1' into is_close 
    - save zip code not starts with '0' or '1' into is_far (assume nan as close)